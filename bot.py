import logging
import asyncio
import aiohttp
import re
import os
from typing import Dict

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    CallbackContext,
    filters,
)
from telegram.error import BadRequest, TelegramError
from logging.handlers import RotatingFileHandler

# --------------------- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ---------------------
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

handler = RotatingFileHandler("bot.log", maxBytes=5*1024*1024, backupCount=5)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

# --------------------- –ö–û–ù–°–¢–ê–ù–¢–´ ---------------------
APPS_SCRIPT_URL = "https://script.google.com/macros/s/AKfycbzLP6DDjRi6R6UEO4PAv1e5MM6Wy42BeTVnqGqwIvO23sghquPqtRzMtzlJrVznQpqb/exec"  # <-- –£–∫–∞–∂–∏—Ç–µ –≤–∞—à URL
BOT_TOKEN = "7507339261:AAFCLBJT7m8jHMPxKcpTqpWkMaXQbbwWRks"  # <-- –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω

GROUP_CHAT_ID = -1002429928901      # ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
ADMIN_CHAT_IDS = [418838097, 216931773]  # –°–ø–∏—Å–æ–∫ chat_id –∞–¥–º–∏–Ω–æ–≤

FIELDS = [
    "–ê–Ω–∏–º–∞—Ç–æ—Ä",
    "–ê–Ω—Å–∞–º–±–ª—å/–ö–æ–ª–ª–µ–∫—Ç–∏–≤",
    "–ê—Ä–µ–Ω–¥–∞ –º–µ–±–µ–ª–∏",
    "–®–∞—Ç—Ä–æ–≤",
    "–î—Ä—É–≥–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å",
    "–ê—Ä—Ç–∏—Å—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞",
    "–ë–∞–∑–∞ –æ—Ç–¥—ã—Ö–∞",
    "–û—Ç–µ–ª—å",
    "–ì–æ—Å—Ç–µ–≤–æ–π –¥–æ–º",
    "–í–µ–¥—É—â–∏–π",
    "–í–∏–∑–∞–∂–∏—Å—Ç",
    "Hair",
    "–°—Ç–∏–ª–∏—Å—Ç",
    "–í–æ–∫–∞–ª–∏—Å—Ç",
    "–ú—É–∑—ã–∫–∞–Ω—Ç",
    "–ö–∞–≤–µ—Ä –≥—Ä—É–ø–ø–∞",
    "–î–∏-–¥–∂–µ–π",
    "–ó–≤—É–∫–æ–æ–ø–µ—Ä–∞—Ç–æ—Ä",
    "–î–∏–∑–∞–π–Ω",
    "Motion",
    "–ë—Ä–µ–Ω–¥–∏–Ω–≥",
    "–ö–µ–π—Ç–µ—Ä–∏–Ω–≥",
    "–ö–æ–Ω–¥–∏—Ç–µ—Ä",
    "Food —Ñ–ª–æ—Ä–∏—Å—Ç",
    "–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥",
    "HR & PR —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
    "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä",
    "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä",
    "–†–µ—Å—Ç–æ—Ä–∞–Ω",
    "–ë–∞–Ω–∫–µ—Ç-–•–æ–ª–ª",
    "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª—É–∂–±—ã",
    "–°–≤–µ—Ç",
    "–ó–≤—É–∫",
    "–°—Ü–µ–Ω–∞",
    "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
    "–ù–∞–∑–µ–º–Ω—ã–π",
    "–í–æ–¥–Ω—ã–π",
    "–í–æ–∑–¥—É—à–Ω—ã–π",
    "–¢—É—Ä–∏–∑–º",
    "–¢—É—Ä—ã",
    "–ì–∏–¥—ã",
    "–ê–≥–µ–Ω—Ç—ã",
    "–§–ª–æ—Ä–∏—Å—Ç–∏–∫–∞",
    "–î–µ–∫–æ—Ä",
    "–§–æ—Ç–æ–≥—Ä–∞—Ñ",
    "–í–∏–¥–µ–æ–≥—Ä–∞—Ñ",
    "–ú–æ–±–∏–ª—å–Ω–∞—è —Å—ä—ë–º–∫–∞",
    "–ó–∞–∫–∞–∑—á–∏–∫",
    "–î—Ä—É–≥–æ–µ"
]

RULES_TEXT = (
    "{name},–∑–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –ª—é–±–æ–≥–æ "
    "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π, —Ç—É—Ä–∏–∑–º–∞ –∏ –∫—Ä–µ–∞—Ç–∏–≤–∞.\n\n"
    "–ß—Ç–æ–±—ã –Ω–∞—à–∞ —Å –í–∞–º–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏–ª–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ –∏ —á–∞—Ç –±—ã–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º "
    "–ø–µ—Ä–µ–¥ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º –≤ –≥—Ä—É–ø–ø—É –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —á–∞—Ç–∞.\n\n"
    "‚úÖ –ß–¢–û –ó–î–ï–°–¨ –î–ï–õ–ê–¢–¨ –ú–û–ñ–ù–û:\n"
    "- –ü–æ–∏—Å–∫ –Ω—É–∂–Ω–æ–≥–æ –í–∞–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ (–≤–µ–¥—É—â–∏–µ, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏–ª–∏ —Ç—É—Ä–æ–≤, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –º–µ–±–µ–ª—å, –∞—Ä—Ç–∏—Å—Ç—ã –∏ –¥—Ä.)\n"
    "- –†–µ–∫–ª–∞–º–∞ –∏ –ø—Ä–æ–¥–∞–∂–∞ —Å–≤–æ–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥ –≤ –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã—Ö –≤–µ—Ç–∫–∞—Ö\n"
    "- –î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–∞—Ç—ã, –≤–∑–∏–º–∞–µ—Ç—Å—è –ø–ª–∞—Ç–∞. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –≤–µ—Ç–∫–µ ¬´–ê—Ñ–∏—à–∞ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π¬ª\n"
    "- –û–±—Å—É–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã—Ö —Ç–µ–º, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π –∏ –ø—Ä–æ–µ–∫—Ç–æ–≤, –ø–æ–∏—Å–∫ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤\n"
    "- –ö–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—è. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ\n"
    "- –ó–∞–ø—Ä–æ—Å—ã —Å–æ–≤–µ—Ç–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n"
    "üî• –í —Å–ø–æ—Ä–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö, –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–ª–∏—Ç—å –¥—É—à—É –≤ –≤–µ—Ç–∫–µ ¬´–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫¬ª\n\n"
    "üö´ –ó–ê–ü–†–ï–©–ï–ù–û:\n"
    "- –ü—Ä–æ—Å–∏—Ç—å –ª–∞–π–∫–∏, –≥–æ–ª–æ—Å–∞ –∏ —Ç. –¥.\n"
    "- –û—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å —Å–±–æ—Ä –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤\n"
    "- –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –¥—Ä—É–≥–∏–µ —á–∞—Ç—ã\n"
    "- –§–ª—É–¥ –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ª–∏—á–Ω–æ—Å—Ç–∏\n"
    "- –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ (—Å–ø–∞–º) –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–æ–ª–µ–µ —á–µ–º 3-—Ö –≤–µ—Ç–∫–∞—Ö\n"
    "- –ü–∏—Å–∞—Ç—å —Å CAPS LOCK\n"
    "- –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞ –ø–æ–¥—Ä—è–¥\n"
    "–ü—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏.\n"
    "‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–≤–ª–µ–∫–∞—Ç—å—Å—è.\n\n"
    "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—Å–∞—Ç—å @artemtiik\n\n"
    "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –º—ã –¥–æ–±–∞–≤–∏–ª–∏ –í–∞—Å –≤ —á–∞—Ç –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É,—á—Ç–æ –í—ã –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —á–∞—Ç–∞.\n"
)

WELCOME_TEXT = (
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º—å—é–Ω–∏—Ç–∏ Event_Irkutsk!\n"
    "–ï—Å–ª–∏ –Ω–∞—à —á–∞—Ç –æ–∫–∞–∂–µ—Ç—Å—è –¥–ª—è –í–∞—Å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –í—ã –±—É–¥–µ—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –∑–∞–∫–∞–∑—ã, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏ —Ä–µ—à–∞—Ç—å —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, "
    "–º—ã –±—É–¥–µ–º –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω—ã –í–∞—à–µ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ –≤ –ª—é–±–æ–º —ç–∫–≤–∏–≤–∞–ªente. –í–∞—à–∏ –¥–æ–Ω–∞—Ç—ã –ø–æ–∑–≤–æ–ª—è—Ç –Ω–∞–º "
    "–æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏, –∞ —Ç–∞–∫–∂–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∏–Ω–¥—É—Å—Ç—Ä–∏–∏.\n"
    "‚ö°Ô∏è‚ö°Ô∏è‚ö°Ô∏è‚ö°Ô∏è‚ö°Ô∏è‚ö°Ô∏è‚ö°Ô∏è‚ö°Ô∏è‚ö°Ô∏è‚ö°Ô∏è‚ö°Ô∏è\n"
    "–í–´ –ú–û–ñ–ï–¢–ï –ü–ï–†–ï–í–ï–°–¢–ò –õ–Æ–ë–£–Æ –°–£–ú–ú–£ –ü–û –°–°–´–õ–ö–ï\n"
    "https://eventirkutsk.ru/donations\n"
    "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞—à–µ–≥–æ –∫–æ–º—å—é–Ω–∏—Ç–∏!\n\n"
    "–í—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç! https://t.me/Event_Irkutsk"
)

# --------------------- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° GOOGLE APPS SCRIPT ---------------------
async def send_async_request(url: str, payload: Dict) -> Dict:
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload, timeout=10) as resp:
                if resp.status == 200:
                    return await resp.json()
                else:
                    text = await resp.text()
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {url}: {resp.status}, {text}")
                    return {}
    except Exception as ex:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}: {ex}")
        return {}

async def is_user_in_gsheets(user_id: int) -> bool:
    payload = {"action": "is_user_authorized", "chat_id": str(user_id)}
    data = await send_async_request(APPS_SCRIPT_URL, payload)
    return data.get("authorized", False)

def check_spam(message_text: str) -> bool:
    spam_patterns = [
        r"–∑–∞—Ä–∞–±–æ—Ç–æ–∫\s–±–µ–∑\s–≤–ª–æ–∂–µ–Ω–∏–π",
        r"–±—ã—Å—Ç—Ä—ã–µ\s–¥–µ–Ω—å–≥–∏",
        r"—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è\s–ø–∏—Ä–∞–º–∏–¥–∞",
        r"—Ä–∞–∑–¥–∞—á–∞\s–¥–µ–Ω–µ–≥",
        r"–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ\s–∫–∞–Ω–∞–ª–∞",
        r"–Ω–∞–∫—Ä—É—Ç–∫–∞",
        r"–ø–∞—Å—Å–∏–≤–Ω—ã–π\s–¥–æ—Ö–æ–¥",
        r"–∑–∞—Ä–∞–±–æ—Ç–æ–∫\s–±–µ–∑\s–≤–ª–æ–∂–µ–Ω–∏–π",
        r"–±—ã—Å—Ç—Ä—ã–µ\s–¥–µ–Ω—å–≥–∏",
        r"—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è\s–ø–∏—Ä–∞–º–∏–¥–∞",
        r"—Ä–∞–∑–¥–∞—á–∞\s–¥–µ–Ω–µ–≥",
        r"–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ\s–∫–∞–Ω–∞–ª–∞",
        r"–Ω–∞–∫—Ä—É—Ç–∫–∞",
        r"–ø–∞—Å—Å–∏–≤–Ω—ã–π\s–¥–æ—Ö–æ–¥",
        r"—Å–≤–æ",
        r"–ø—É—Ç–∏–Ω",
        r"–∑–∞—Ä–∞–±–æ—Ç–∞–π\s–ø—Ä—è–º–æ\s—Å–µ–π—á–∞—Å",
        r"–¥–æ—Ö–æ–¥\s–Ω–∞\s–∞–≤—Ç–æ–º–∞—Ç–µ",
        r"–±—ã—Å—Ç—Ä–∞—è\s–Ω–∞–∫—Ä—É—Ç–∫–∞",
        r"—Å—Ö–µ–º—ã\s–∑–∞—Ä–∞–±–æ—Ç–∫–∞",
        r"–ø—Ä–æ–¥–∞–∂–∞\s–±–∞–∑—ã\s–∫–æ–Ω—Ç–∞–∫—Ç–æ–≤",
        r"–ª–µ–≥–∫–∏–µ\s–¥–µ–Ω—å–≥–∏",
        r"–≤–ª–æ–∂–∏\s–∏\s–∑–∞—Ä–∞–±–æ—Ç–∞–π",
        r"–ø–æ–ª—É—á–∏\s–¥–µ–Ω—å–≥–∏\s–ø—Ä—è–º–æ\s—Å–µ–π—á–∞—Å",
        r"–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞\s–±–µ–∑\s–≤–ª–æ–∂–µ–Ω–∏–π",
        r"—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è\s—Å–≤–æ–±–æ–¥–∞",
        r"–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π\s–∑–∞—Ä–∞–±–æ—Ç–æ–∫",
        r"—Ö–∞–ª—è–≤–∞",
        r"—Ä–∞—Å–∫—Ä—É—Ç–∫–∞\s–∞–∫–∫–∞—É–Ω—Ç–∞",
        r"–∑–∞—Ä–∞–±–æ—Ç–æ–∫\s–±–µ–∑\s—É—Å–∏–ª–∏–π",
        r"–≤\s—Ç—Ä–µ–Ω–¥—ã\s—é—Ç—É–±",
        r"–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ",
        r"–ø–∞—Å—Å–∏–≤–Ω—ã–π\s–¥–æ—Ö–æ–¥\s2023",
        r"–≤—ã–≤–æ–¥\s—Å—Ä–µ–¥—Å—Ç–≤\s–∑–∞\s5\s–º–∏–Ω—É—Ç",
        r"–±–µ—Å–ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã–µ\s—Å—Ç–∞–≤–∫–∏",
        r"—Å–∫–∞—á–∞—Ç—å\s–ø—Ä–æ–≥—Ä–∞–º–º—É\s–¥–ª—è\s–∑–∞—Ä–∞–±–æ—Ç–∫–∞",
        r"—Ä–∞–±–æ—Ç–∞\s–Ω–∞\s–¥–æ–º—É",
        r"–¥–µ–Ω—å–≥–∏\s–±–µ–∑\s–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤",
        r"–¥–µ–Ω—å–≥–∏\s–∑–¥–µ—Å—å\s–∏\s—Å–µ–π—á–∞—Å"
    ]
    msg_lower = message_text.lower()
    return any(re.search(pattern, msg_lower) for pattern in spam_patterns)

# --------------------- –£–î–ê–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô ---------------------
async def delete_message_job(context: CallbackContext):
    job = context.job
    chat_id = job.data["chat_id"]
    message_id = job.data["message_id"]
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–æ—Ç–∞ (message_id={message_id}) —É–¥–∞–ª–µ–Ω–æ –∏–∑ —á–∞—Ç–∞ {chat_id}")
    except TelegramError as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (message_id={message_id}): {e}")

# --------------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ---------------------
async def text_handler(update: Update, context: CallbackContext):
    if update.effective_chat.type in ("group", "supergroup"):
        await handle_group_message(update, context)
    elif update.effective_chat.type == "private":
        await handle_private_message(update, context)
    else:
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞ —á–∞—Ç–∞: {update.effective_chat.type}")

async def handle_group_message(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    text = update.message.text
    real_user_id = update.effective_user.id

    username = update.effective_user.username
    first_name = update.effective_user.first_name
    mention_name = f"@{username}" if username else first_name or str(real_user_id)

    if not await is_user_in_gsheets(real_user_id):
        try:
            await update.message.delete()
        except TelegramError as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ: {e}")

        warn_msg = await update.effective_chat.send_message(
            text=(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention_name}, –≤—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —á–∞—Ç–µ.\n"
                f"–ü—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞ "
                f'<a href="t.me/Event_Irkutsk_Bot">@antyspamevent_bot</a>.'
            ),
            parse_mode="HTML",
            message_thread_id=update.message.message_thread_id
        )

        context.application.job_queue.run_once(
            delete_message_job,
            when=30,
            data={"chat_id": chat_id, "message_id": warn_msg.message_id}
        )
        return

    if check_spam(text):
        try:
            await update.message.delete()
        except TelegramError as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        warns = context.user_data.get("spam_warnings", 0) + 1
        context.user_data["spam_warnings"] = warns
        if warns == 1:
            spam_msg = await update.effective_chat.send_message(
                text=f"{mention_name}, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–ø–∞–º. –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ‚Ññ1.",
                message_thread_id=update.message.message_thread_id
            )
            payload = {"action": "warn_spammer", "chat_id": real_user_id, "warns": warns}
            await send_async_request(APPS_SCRIPT_URL, payload)
        else:
            try:
                await update.effective_chat.ban_member(real_user_id)
                ban_msg = await update.effective_chat.send_message(
                    text=f"{mention_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π —Å–ø–∞–º.",
                    message_thread_id=update.message.message_thread_id
                )
                payload = {"action": "block_spammer", "chat_id": real_user_id}
                await send_async_request(APPS_SCRIPT_URL, payload)
            except TelegramError as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {real_user_id}: {e}")

async def handle_private_message(update: Update, context: CallbackContext):
    user_id = update.effective_chat.id
    text = update.message.text
    state = context.user_data.get("state", "")

    if context.user_data.get("registered"):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.")
        return

    if state == "waiting_for_full_name":
        full_name = text.strip().split()
        if len(full_name) < 2:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ **–º–∏–Ω–∏–º—É–º** –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é (–¥–≤–∞ —Å–ª–æ–≤–∞).\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: `–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤`",
                parse_mode="Markdown"
            )
            return

        first_name = full_name[0]
        last_name = " ".join(full_name[1:])
        context.user_data["first_name"] = first_name
        context.user_data["last_name"] = last_name

        context.user_data["state"] = "waiting_for_phone"
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É:",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
                resize_keyboard=True,
                one_time_keyboard=True,
            )
        )
        return

    if state == "waiting_for_phone":
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç¬ª.\n"
            "–í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –≤—Ä—É—á–Ω—É—é –æ—Ç–∫–ª—é—á—ë–Ω."
        )
        return

    if user_id in ADMIN_CHAT_IDS:
        await handle_admin_message(update, context)
        return

    logger.info(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–∫–µ –æ—Ç {user_id}, state={state}: {text}")

async def handle_admin_message(update: Update, context: CallbackContext):
    user_id = update.effective_chat.id
    text = update.message.text
    state = context.user_data.get("state", "")

    if state == "admin_typing_msg_all":
        msg_to_send = text
        await update.message.reply_text("–†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º...")
        await send_message_to_all(msg_to_send, context)
        await update.message.reply_text("–ì–æ—Ç–æ–≤–æ! –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º.")
        context.user_data["state"] = ""
        return

    if state == "admin_typing_msg_cats":
        selected_cats = context.user_data.get("admin_selected_categories", [])
        if not selected_cats:
            await update.message.reply_text("–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            context.user_data["state"] = ""
            return

        msg_to_send = text
        await update.message.reply_text(
            f"–†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {', '.join(selected_cats)}"
        )
        for cat in selected_cats:
            await send_message_to_category(cat, msg_to_send, context)
            await asyncio.sleep(0.1)
        await update.message.reply_text("–ì–æ—Ç–æ–≤–æ! –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º‚úÖ.")
        context.user_data["state"] = ""
        context.user_data["admin_selected_categories"] = []
        return

    if state == "admin_unblock_user":
        try:
            user_to_unblock = int(text)
            try:
                await context.bot.unban_chat_member(chat_id=GROUP_CHAT_ID, user_id=user_to_unblock)
                await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_unblock} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            except TelegramError as ex:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {ex}")
                await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ.")

            payload = {"action": "unblock_spammer", "chat_id": user_to_unblock}
            await send_async_request(APPS_SCRIPT_URL, payload)
        except ValueError:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chat_id. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        context.user_data["state"] = ""
        return

    logger.info(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}, state={state}: {text}")

# --------------------- –ö–û–ú–ê–ù–î–ê /START ---------------------
async def start(update: Update, context: CallbackContext):
    user_id = update.effective_chat.id
    logger.info(f"/start –æ—Ç user_id={user_id}")

    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω - —Å—Ä–∞–∑—É –∞–¥–º–∏–Ω-–º–µ–Ω—é
    if user_id in ADMIN_CHAT_IDS:
        await admin_menu(update, context)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if update.effective_user:
        context.user_data["name"] = update.effective_user.first_name or "NoName"
    else:
        context.user_data["name"] = "Unknown"

    # 1. –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –¥–≤–µ –∫–Ω–æ–ø–∫–∏: —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ñ–µ—Ä—Ç—É –∏ "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
    greeting_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {context.user_data['name']}!\n\n"
        "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –æ—Ñ–µ—Ä—Ç–æ–π. "
        "–ù–∞–∂–∏–º–∞—è ¬´–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é¬ª, –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ—Ñ–µ—Ä—Ç—ã:\n"
        "https://eventirkutsk.ru/privacy\n\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ:"
    )

    kb = [
        [
            InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ñ–µ—Ä—Ç—É", url="https://eventirkutsk.ru/privacy"),
            InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="start_registration")
        ]
    ]
    await update.message.reply_text(
        greeting_text,
        reply_markup=InlineKeyboardMarkup(kb)
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –¥–æ–∂–¥–∞—Ç—å—Å—è –Ω–∞–∂–∞—Ç–∏—è "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
    context.user_data["state"] = "greeting_shown"

# --------------------- –ê–î–ú–ò–ù-–ú–ï–ù–Æ ---------------------
async def admin_menu(update: Update, context: CallbackContext):
    user_id = update.effective_chat.id
    admin_kb = [
        [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="send_message")],
        [InlineKeyboardButton("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="unblock_user")],
        [InlineKeyboardButton("–ö–Ω–æ–ø–∫–∞ 1", callback_data="some_other_button1")],
        [InlineKeyboardButton("–ö–Ω–æ–ø–∫–∞ 2", callback_data="some_other_button2")],
        [InlineKeyboardButton("–ö–Ω–æ–ø–∫–∞ 3", callback_data="some_other_button3")],
    ]
    await update.message.reply_text(
        f"–ê–¥–º–∏–Ω-–º–µ–Ω—é (chat_id={user_id}):",
        reply_markup=InlineKeyboardMarkup(admin_kb)
    )

# --------------------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≥–∞–ª–æ—á–∫–∞–º–∏ ---------------------
def generate_fields_keyboard(selected_fields):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º FIELDS, –ø—Ä–æ—Å—Ç–∞–≤–ª—è—è ‚úÖ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö."""
    keyboard = []
    row = []
    for i, field in enumerate(FIELDS):
        text = field + (" ‚úÖ" if field in selected_fields else "")
        row.append(InlineKeyboardButton(text, callback_data=f"field_toggle_{i}"))
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)

    keyboard.append([InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="fields_done")])
    return InlineKeyboardMarkup(keyboard)

def generate_admin_categories_keyboard(selected_cats):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∞–¥–º–∏–Ω–æ–º."""
    keyboard = []
    row = []
    for i, cat in enumerate(FIELDS):
        text = cat + (" ‚úÖ" if cat in selected_cats else "")
        row.append(InlineKeyboardButton(text, callback_data=f"admin_cat_toggle_{i}"))
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)

    keyboard.append([InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="admin_cats_done")])
    return InlineKeyboardMarkup(keyboard)

# --------------------- CALLBACK ---------------------
async def callback_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    user_id = query.message.chat.id
    data = query.data
    state = context.user_data.get("state", "")

    logger.info(f"Callback '{data}' –æ—Ç user_id={user_id}, state={state}")

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é" –ø–æ—Å–ª–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è ---
    if state == "greeting_shown" and data == "start_registration":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é –ø—Ä–∞–≤–∏–ª (—Ä–∞–Ω–µ–µ –±—ã–ª–æ –≤ /start)
        rules_text = RULES_TEXT.replace("{name}", context.user_data["name"])
        await query.message.reply_text(
            rules_text,
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("–Ø –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω/–∞‚úÖ", callback_data="rules_confirmed")]]
            )
        )
        context.user_data["state"] = "waiting_for_rules_confirmation"
        return

    # 2. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
    if state == "waiting_for_rules_confirmation" and data == "rules_confirmed":
        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–ª –Ω–∏—á–µ–≥–æ
        context.user_data["selected_fields"] = []
        await query.message.reply_text(
            "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –∫ –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ) –∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **–≥–æ—Ç–æ–≤–æ**.",
            reply_markup=generate_fields_keyboard(context.user_data["selected_fields"]),
            parse_mode="Markdown"
        )
        context.user_data["state"] = "waiting_for_field"
        return

    # 3. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–ª—è (—Å—Ñ–µ—Ä—ã)
    if state == "waiting_for_field" and data.startswith("field_toggle_"):
        try:
            idx = int(data.split("_")[-1])
            field = FIELDS[idx]
        except (ValueError, IndexError):
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ñ–µ—Ä–∞: {data}")
            await query.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ñ–µ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        selected = context.user_data.get("selected_fields", [])
        if field in selected:
            selected.remove(field)
        else:
            selected.append(field)

        context.user_data["selected_fields"] = selected
        await query.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –∫ –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            reply_markup=generate_fields_keyboard(selected)
        )
        return

    # 4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª –≤—ã–±–æ—Ä —Å—Ñ–µ—Ä
    if state == "waiting_for_field" and data == "fields_done":
        selected = context.user_data.get("selected_fields", [])
        if not selected:
            await query.message.reply_text(
                "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Å—Ñ–µ—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É."
            )
            return

        context.user_data["field"] = ", ".join(selected)
        context.user_data["state"] = "waiting_for_full_name"
        await query.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤`",
            parse_mode="Markdown"
        )
        return

    # -----------------------------------
    #           –ë–õ–û–ö –ê–î–ú–ò–ù–ê
    # -----------------------------------
    if user_id in ADMIN_CHAT_IDS:
        # –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
        if data == "send_message":
            admin_buttons = [
                [InlineKeyboardButton("–í—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º", callback_data="admin_send_all")],
                [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="admin_select_cats")]
            ]
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–∞—Å—Å—ã–ª–∫–∏:",
                reply_markup=InlineKeyboardMarkup(admin_buttons)
            )
            return

        if data == "admin_send_all":
            context.user_data["state"] = "admin_typing_msg_all"
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º:")
            return

        if data == "admin_select_cats":
            context.user_data["admin_selected_categories"] = []
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
                reply_markup=generate_admin_categories_keyboard(context.user_data["admin_selected_categories"])
            )
            return

        if data.startswith("admin_cat_toggle_"):
            try:
                idx = int(data.split("_")[-1])
                cat = FIELDS[idx]
            except (ValueError, IndexError):
                logger.error(f"–û—à–∏–±–∫–∞ admin_cat_toggle: {data}")
                await query.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            selected_cats = context.user_data.get("admin_selected_categories", [])
            if cat in selected_cats:
                selected_cats.remove(cat)
            else:
                selected_cats.append(cat)

            context.user_data["admin_selected_categories"] = selected_cats

            await query.message.edit_text(
                text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
                reply_markup=generate_admin_categories_keyboard(selected_cats)
            )
            return

        if data == "admin_cats_done":
            selected_cats = context.user_data.get("admin_selected_categories", [])
            if not selected_cats:
                await query.message.reply_text("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
                return

            context.user_data["state"] = "admin_typing_msg_cats"
            await query.message.reply_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(selected_cats)}.\n"
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —ç—Ç–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:"
            )
            return

        if data == "unblock_user":
            context.user_data["state"] = "admin_unblock_user"
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:")
            return

        if data == "some_other_button1":
            await query.message.reply_text("–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        if data == "some_other_button2":
            await query.message.reply_text("–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        if data == "some_other_button3":
            await query.message.reply_text("–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

    logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π callback data={data}, state={state}")

# --------------------- –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ù–¢–ê–ö–¢–ê ---------------------
async def contact_handler(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    state = context.user_data.get("state", "")

    if context.user_data.get("registered"):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç.")
        return

    if state == "waiting_for_phone":
        contact = update.message.contact
        if contact:
            context.user_data["phone"] = contact.phone_number
            await save_and_finish(update, context)
        else:
            logger.warning("–ö–æ–Ω—Ç–∞–∫—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ None")
            await update.message.reply_text("–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç¬ª.")
        return

# --------------------- –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ---------------------
async def save_and_finish(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id

    first_name = context.user_data.get("first_name", "NoName")
    last_name = context.user_data.get("last_name", "NoSurname")
    phone = context.user_data.get("phone", "")
    field = context.user_data.get("field", "")

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
    name = f"{first_name} {last_name}".strip()

    payload = {
        "action": "save_user_data",
        "chat_id": str(chat_id),
        "name": name,
        "phone": phone,
        "field": field
    }
    try:
        data = await send_async_request(APPS_SCRIPT_URL, payload)
        if data.get("status") == "ok":
            logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {chat_id}: {data}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ Apps Script: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    context.user_data["registered"] = True

    if await is_user_in_gsheets(chat_id):
        await try_invite_user_to_group(context, chat_id)

    await update.message.reply_text(
        WELCOME_TEXT,
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("–í—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç!", url="https://t.me/Event_Irkutsk")]]
        )
    )
    context.user_data.pop("state", None)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")

# --------------------- –ü–†–ò–ì–õ–ê–®–ï–ù–ò–ï –í –ì–†–£–ü–ü–£ ---------------------
async def try_invite_user_to_group(context: CallbackContext, user_id: int):
    try:
        member = await context.bot.get_chat_member(GROUP_CHAT_ID, user_id)
        if member.status in ["kicked", "left"]:
            await context.bot.unban_chat_member(chat_id=GROUP_CHAT_ID, user_id=user_id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏–≥–ª–∞—à—ë–Ω –≤ –≥—Ä—É–ø–ø—É {GROUP_CHAT_ID}.")
        else:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã.")
    except BadRequest as e:
        if "not kicked" in str(e).lower():
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã.")
        else:
            logger.error(f"BadRequest –ø—Ä–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ user_id={user_id}: {e}")
    except TelegramError as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å/–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å user_id={user_id}: {e}")

# --------------------- –†–ê–°–°–´–õ–ö–ò ---------------------
async def send_message_to_all(text_to_send: str, context: CallbackContext) -> None:
    payload = {"action": "get_all_chat_ids"}
    data = await send_async_request(APPS_SCRIPT_URL, payload)
    chat_ids = data.get("chat_ids", [])

    tasks = []
    for cid in chat_ids:
        tasks.append(send_message(cid, text_to_send, context))
        await asyncio.sleep(0.05)

    await asyncio.gather(*tasks)

async def send_message_to_category(category: str, text_to_send: str, context: CallbackContext) -> None:
    payload = {"action": "get_chat_ids_by_category", "category": category}
    data = await send_async_request(APPS_SCRIPT_URL, payload)
    chat_ids = data.get("chat_ids", [])

    tasks = []
    for cid in chat_ids:
        tasks.append(send_message(cid, text_to_send, context))
        await asyncio.sleep(0.05)

    await asyncio.gather(*tasks)

async def send_message(chat_id: int, text: str, context: CallbackContext):
    try:
        await context.bot.send_message(chat_id=chat_id, text=text)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}.")
    except TelegramError as ex:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {ex}")

# --------------------- –ì–õ–û–ë–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ---------------------
async def error_handler(update: object, context: CallbackContext):
    logger.error(msg="Exception while handling an update:", exc_info=context.error)
    if isinstance(update, Update):
        try:
            await update.effective_message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
        except TelegramError:
            pass

# --------------------- –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---------------------
def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_menu))
    application.add_handler(CallbackQueryHandler(callback_handler))
    application.add_handler(MessageHandler(filters.CONTACT, contact_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    application.add_error_handler(error_handler)

    # --------------------- –†–ê–ë–û–¢–ê –ß–ï–†–ï–ó –í–ï–ë–•–£–ö ---------------------
    # –î–ª—è Render (–∏–ª–∏ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞), –Ω–∞–º –Ω—É–∂–µ–Ω –ø–æ—Ä—Ç –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    PORT = int(os.environ.get("PORT", 8443))

    # –ü—É—Ç—å –¥–æ –≤–µ–±—Ö—É–∫–∞ (–æ–±—ã—á–Ω–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ /<BOT_TOKEN>):
    WEBHOOK_PATH = f"/{BOT_TOKEN}"

    # –ï—Å–ª–∏ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ—Å—å –Ω–∞ Render, —É –≤–∞—Å –±—É–¥–µ—Ç RENDER_EXTERNAL_HOSTNAME
    # –ü—Ä–∏–º–µ—Ä: <–∏–º—è-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è>.onrender.com
    render_hostname = os.environ.get("RENDER_EXTERNAL_HOSTNAME", "your-app-name.onrender.com")
    WEBHOOK_URL = f"https://{render_hostname}{WEBHOOK_PATH}"

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=BOT_TOKEN,
        webhook_url=WEBHOOK_URL
    )

    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    main()
